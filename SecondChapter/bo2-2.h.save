// 带头结点
void InitList(LinkList &L)
{
    L = (LNode*)malloc(sizeof(LNode));
    if(!L)
        exit(OVERFLOW);
    L->next = NULL;

}

void DestroyList(LinkList &L)
{
    LinkList *p;
    while(L)
    {
        p = L->next;
        free(L);
        L = p;
    }
}

void ClearList(LinkList L)
{
    LinkList *p = L->next;
    L->next = NULL;
    DestroyList(p);
}

Status ListEmpty(LinkList L)
{
    if(L->next)
        return FALSE;
    return TRUE;
}

int ListLength(LinkList L)
{
    int i = 0;
    LinkList p = L->next;
    while(p)
    {
        i++;
        p = p->next;
    }
    return i;
}

Status GetElem(LinkList L, int i, ElemType &e)
{
    int j = 1;
    LinkList p = L->next;
    for(p && j < i)
    {
        j++;
        p = p->next;
    }
    if(!p || j > i)
        return ERROR;
    e = p->data;
    return OK;
}

int LocateElem(LinkList L, ElemType e, Status(*compare)(ElemType, ElemType))
{
    int i = 1;
    LinkList *p = L->next;
//    while(p && !compare(e, p->data));
//    {
//         p = p->next;
//         i++;
//    }
//    return i;

    while(p)
    {
        i++;
        if(compare(p->data, e))
            return i;
        p = p->next;
    }
    return 0;
}

Status PriorElem(LinkList L, ElemType cur_e, ElemType &pre_e)
{
//    LinkList p = L->next, q;
//    while(p->next && p->next->data != cur_e)
//    {
//        q = P;
//        p = p->next;
//    }
//    pre_e = q->data;
//    return OK;
    LinkList q, p = L->next;
    while(p && p->next)
    {
        q = p->next;
        if(q->data == cur_e)
        {
            pre_e = p->data;
            return OK;
        }
        p = q;
    }
    return ERROR;
}

Status NextElem(LinkList L, ElemType cur_e, ElemType &next_e)
{
    LinkList p = L->next;
    while(p && p->next)
    {
        if(p->data == cur_e)
        {
            next_e = p->next->data;
            return OK;
        }
        p = p->next;
    }
    return ERROR;
}

Status ListInsert(LinkList L, int i, ElemType e)
{
    int j = 0;      // 因为可以插在表头,所以j可以为0
    LinkList s, p = L;
    while(p && j < i-1)
    {
        j++;
        p = p->next;
    }
    if(!p || j > i-1)  
        return ERROE;
    s->data = e;
    s->next = p->next;
    p->next = s;
    return OK;
}

Status ListDelete(LinkList L, int i, ElemType &e)
{

}

void ListTraverse(LinkList L, void(*visit)(ElemType))
{

}
